apply plugin: 'com.android.library'
apply plugin: 'maven'

group = "andr.perf.monitor"
archivesBaseName = "DroidTelescope"
version = "1.0.4"

if (rootProject.file("local").exists()) {
    version = 'local'
    uploadArchives {
        doFirst {
            System.out.println("============uploadArchives for local")
        }
        repositories {
            mavenDeployer {
                repository(url: uri('.maven'))
            }
        }
        finalizedBy(clean)
    }
} else {
    uploadArchives {
        doFirst {
            System.out.println("============uploadArchives for Release!!!!")
        }
        repositories {
            mavenDeployer {
                repository(url: 'http://xxx') {
                    authentication(userName: 'xxx', password: 'xxx')
                }
            }
        }
        finalizedBy(clean)
    }
}

android {
    compileSdkVersion 26
    buildToolsVersion "27.0.3"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 26
        versionCode 1
        versionName version

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testImplementation 'junit:junit:4.12'
    implementation 'com.android.support:support-annotations:27.1.1'
}

// type显示指定任务类型或任务, 这里指定要执行Javadoc这个task,这个task在gradle中已经定义
task androidJavadocs(type: Javadoc) {
    // 设置源码所在的位置
    source = android.sourceSets.main.java.sourceFiles
}

// 生成javadoc.jar
task androidJavadocsJar(type: Jar) {
    // 指定文档名称
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

// 生成sources.jar
task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}

// 产生相关配置文件的任务
artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}

project.afterEvaluate {
    tasks.getByName("assembleRelease") {
        it.doLast {
            println("=====================start copy DroidTelescope.jar=========================")
            def fileName = "classes.jar"
            def fromFile = "./build/intermediates/bundles/default/" + fileName
            def intoFile = "../"

            def versionName = android.defaultConfig.versionName
            def time = new java.text.SimpleDateFormat("yyyyMMdd").format(new Date())

            def jarName = "DroidTelescope_v${versionName}_${time}.jar"

            // copy --> rename
            copy {
                from fromFile
                into intoFile

                rename {
                    jarName
                }
            }
        }
    }
}