apply plugin: 'com.android.application'


android {
    compileSdkVersion 24
    buildToolsVersion '27.0.3'
    defaultConfig {
        applicationId "plugin.gradle.my"
        minSdkVersion 23
        targetSdkVersion 24
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
        release {
            storeFile file("./release.keystore")
            keyAlias "key0"
            keyPassword "123456"
            storePassword "123456"
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
        }
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    dexOptions {
        //是否支持大工程模式
        jumboMode = true
        //预编译
        preDexLibraries = true
        //线程数
        threadCount = 8
        //最大进程数
        maxProcessCount 8
    }
//    flavorDimensions "default"
//    productFlavors {
//        local {
//            versionNameSuffix "-Local-" + System.getenv("BUILD_NUMBER") as String ?: "null"
//            buildConfigField "String", "INSTALLER_ID", "\"Local\""
//        }
//
//        online {
//            versionNameSuffix "-Online-" + System.getenv("BUILD_NUMBER") as String ?: "null"
//            buildConfigField "String", "INSTALLER_ID", "\"Online\""
//        }
//    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':testlibrary')
    //noinspection GradleCompatible
    implementation 'com.android.support:appcompat-v7:25.1.1'
    implementation 'com.android.support:design:24.2.1'
    implementation 'com.android.support:recyclerview-v7:24.2.1'
    debugImplementation project(':DroidTelescope')
    implementation project(':DTRelease')
}

apply plugin: 'telescope.injector'

buildscript {
    repositories {
        maven { url project(':TelescopeInjector').file('.maven').toURI() }
        jcenter()
    }
    dependencies {
        classpath 'andr.perf.monitor:TelescopeInjector:local'
    }
}

//是否启动的Task中包含 Telescope，通常来说 意味着启动的是一个 Telescope Task，比如 assembleTelescopeDebug
boolean isRelease = gradle.startParameter.taskNames.any { it.contains("Release") }

if (isRelease) {
    System.out.println("for release!")
    injectConfig {
        debugLog = true
        forRelease = true
        interactiveEnable = true
//        includePackages = ["plugin.gradle", "com.shit.testlibrary"]
    }
} else {
    System.out.println("for debug!")
    injectConfig {
        debugLog = true
        forRelease = false
        parallelCompile = true
        cpuTimeEnable = true
        memoryLeakEnable = true
        interactiveEnable = true
//        includePackages = ["plugin.gradle", "com.shit.testlibrary"]
    }
}

//injectConfig {
//    debugLog = true
//    forRelease = false
////    debugEnabled = true //enable MethodSampler when debug mode, default true
////    releaseEnabled = false //enable MethodSampler when release mode, default false
//    cpuTimeEnable = true
//    memoryLeakEnable = true
//    interactiveEnable = true
////    //exclude the package you don't want to inject MethodSampler, eg: ['com.android', 'android.support']
////    excludePackages = [""]
////    //exclude the class you don't want to inject MethodSampler, eg:['com.android.view.TextView']
////    excludeClasses = [""]
////    //only include the package you want to inject MethodSampler, packages which don't included will not be injected
//    includePackages = ["plugin.gradle", "com.shit.testlibrary"]
////
//    scope {
//        project = true //inject MethodSampler for app project, default true
//        subProject = true //inject MethodSampler for subProject of app project, default true
//        externalLibraries = true //inject MethodSampler external libs, default false
//    }
//}
